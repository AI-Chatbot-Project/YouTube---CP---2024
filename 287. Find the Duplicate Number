// https://leetcode.com/problems/find-the-duplicate-number/

class Solution {

private:
    int BruteForce(vector<int>& nums)
    {
        // time complexity is O((n) ^ 2)
        for(int i = 0; i < nums.size(); i++)
        {
            for(int j = 0; j < nums.size(); j++)
            {
                if(i != j)
                {
                    if(nums[i] == nums[j])
                    {
                        return nums[i];
                    }
                }
            }
        }

        return -1;
    }

    // Sort nums = {1, 2, 2, 3}
    // if prev == next : check element
    // O(n logn)  + O(n)
    // Space: O(n + 1)

    int BestSolution(vector<int>& nums)
    {
        int n = nums.size();
        vector<int> arr(n, 0);

        for(int i = 0; i < n ; i++)
        {
            arr[i] = nums[i];
        }

        sort(arr.begin(), arr.end());

        int prev = 0;
        for(int i = 0; i < n; i++)
        {
            if(prev == arr[i])
            {
                return arr[i];
            }
            else{
                prev = arr[i];
            }
        }

        return -1;
    }

    // O(n)
    // {1, 2, 3 1} in [1, n]
    // freq {0, 0, 0} || space complexity = O(n) | Time Complexity 2*O(n)
    // freq[i] > 1 : O(n)

    int OptimalSolution(vector<int>& nums)
    {
        int n = nums.size();

        vector<int> freq(n - 1, 0);

        for(int i = 0; i < n; i++)
        {
            freq[nums[i] - 1] += 1;
        }

        for(int i = 0; i < n - 1; i++)
        {
            if(freq[i] > 1)
                return i + 1;
        }
        return -1;
    }
public:

    int findDuplicate(vector<int>& nums) {
       /*
       nums[n + 1] = {1, 2, 3, 1} => return 2

       a in [1, n]

       */

    //    return BruteForce(nums);

        // return BestSolution(nums);

        return OptimalSolution(nums);

    }
};
